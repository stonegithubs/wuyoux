<?php
/**
 * @link http://www.281.com.cn/
 * @copyright Copyright (c) 2014 中山市中辰信息科技有限公司
 * @license http://www.281.com.cn/license
 * User: gred(关瑞宏)
 * Date: gred 2018/6/27
 */

namespace wechat\controllers;

use common\components\Ref;
use common\helpers\images\ImageHelper;
use common\helpers\security\SecurityHelper;
use common\helpers\sms\SmsHelper;
use common\helpers\users\UserHelper;
use wechat\helpers\StateCode;
use wechat\helpers\WxClientHelper;
use yii\helpers\Url;

class  SiteController extends ControllerAuthorize
{
	public $_name; //请求动作ID
	public $_code; //信息码
	public $_message;  //提示信息
	public $_data; //数据主体
	public $_startTime;  //开始访问时间
	public $_status;  //响应状态
	public $api_version;  //api版本号

	public function init()
	{
		parent::init(); // TODO: Change the autogenerated stub
		$this->enableCsrfValidation = false;
		$this->_startTime           = microtime(true); //开始访问的时间
	}

	/**
	 * 响应的数据字段
	 * @return array
	 */
	public function response()
	{
		$result             = [];
		$result['name']     = $this->_name ? $this->_name : $this->id . '/' . $this->action->id;
		$result['code']     = $this->_code ? $this->_code : 0;
		$result['message']  = $this->_message ? $this->_message : '';
		$result['duration'] = round(microtime(true) - $this->_startTime, 4);
		$result['data']     = $this->_data ? $this->_data : '';
		$result['status']   = $this->_status ? $this->_status : 200;

		return json_encode($result);
	}

	/**
	 * 设置状态码提示信息
	 * @param $code
	 */
	public function setCodeMessage($code)
	{
		$this->_code    = $code;
		$this->_message = StateCode::get($code);
	}

	/* -----------------------------注册页面------------------------------ */

	/**
	 * 用户登录页
	 * @return string
	 */
	public function actionLogin()
	{
		$result['data'] = [
			'market_url' => Url::previous()
		];

		return $this->renderPartial('login', $result);
	}

	/**
	 * 用户注册页
	 * @return string
	 */
	public function actionRegister()
	{
		$result['data'] = [
			'market_url' => Url::previous()
		];

		return $this->renderPartial('register', $result);
	}

	/**
	 * 无忧帮帮声明
	 * @return string
	 */
	public function actionProtocol()
	{
		return $this->renderPartial('protocol');
	}

	/* -----------------------------AJAX接口------------------------------ */

	/**
	 * 发送短信验证码
	 * @return array
	 */
	public function actionAjaxSendCode()
	{
		$mobile         = SecurityHelper::getBodyParam('mobile');
		$type           = SecurityHelper::getBodyParam('type');//验证码类型 1 注册 4 快捷登录
		$data['status'] = 1; //1是成功，2是失败，3是太频繁，4是图形验证码错误，5账号不存在 6账号已经存在

		if ($type == 1) {
			if (UserHelper::checkMobileExist($mobile)) {
				$data['status'] = 6;
				$this->_data    = $data;
				$this->_message = '账号已经存在';

				return $this->response();
			}

		} else {//不是新用户注册要检查号码是否存在
			if (!UserHelper::checkMobileExist($mobile)) {
				$data['status'] = 5;
				$this->_data    = $data;
				$this->_message = '账号不存在';

				return $this->response();
			}
		}
		$num = SecurityHelper::getCodeFreq($mobile);
		//4次的整数倍时需要图形验证码，校验之后才能继续获取短信验证码
		if ($num > 0 && (fmod($num, 4) == 0)) {
			$graphCode  = SecurityHelper::getBodyParam('graph_code');
			$confirmRes = SecurityHelper::confirmGraph($mobile, $type, $graphCode);
			if ($confirmRes > 0) {
				$data['status'] = $confirmRes == 1 ? 3 : 4;
				$this->_data    = $data;
				$this->_message = $confirmRes == 1 ? '获取太频繁' : '图形验证码错误';

				return $this->response();
			}
		}
		$res = SmsHelper::sendCode($mobile, $type);
		if ($res) {
			$this->_data    = $data;
			$this->_message = '获取验证码成功';
		} else {
			$data['status'] = 2;
			$this->_data    = $data;
			$this->_message = "获取验证码失败";
		}

		return $this->response();
	}

	/**
	 * 获取图形验证码
	 * @return array
	 */
	public function actionAjaxGetAuthCode()
	{
		$mobile   = SecurityHelper::getBodyParam('mobile');
		$type     = SecurityHelper::getBodyParam('type');//验证码类型 1 注册 4 快捷登录
		$imageUrl = SecurityHelper::getGraphCode($mobile, $type);
		if ($imageUrl) {
			$this->_data    = $imageUrl;
			$this->_message = '获取成功';
		} else {
			$this->_code    = StateCode::COMMON_OPERA_ERROR;
			$this->_message = '获取验证码过于频繁！';
		}

		return $this->response();
	}

	/**
	 * 注册
	 * @return array
	 */
	public function actionAjaxSignUp()
	{
		$params['openid']        = $this->_wxOpenId;
		$params['nickname']      = SecurityHelper::getBodyParam('nickname');
		$params['mobile']        = SecurityHelper::getBodyParam('mobile');
		$params['password']      = SecurityHelper::getBodyParam('password');
		$params['code']          = SecurityHelper::getBodyParam('code');
		$params['invite_mobile'] = SecurityHelper::getBodyParam('invite_code');
		$params['user_location'] = SecurityHelper::getBodyParam('user_location');
		$params['register_src']  = Ref::ORDER_FROM_WECHAT;

		if (!SecurityHelper::checkCode($params['mobile'], $params['code'], Ref::SMS_CODE_REGISTER)) {
			$this->_code    = StateCode::OTHER_SMS_INCORRECT_CODE;
			$this->_message = '验证码错误或失效';

			return $this->response();
		}
		$res = UserHelper::checkMobileExist($params['mobile']);
		if ($res) {
			$this->_code    = StateCode::OTHER_MOBILE_EXIST;
			$this->_message = "用户已存在";

			return $this->response();
		}

		if ($params['invite_mobile']) {
			$res = UserHelper::checkMobileExist($params['invite_mobile']);
			if (!$res) {
				$this->_code    = StateCode::OTHER_MOBILE_NO_EXIST;
				$this->_message = "该邀请人号码不存在";

				return $this->response();
			} else {
				$params['invite_id'] = $res['uid'];
			}
		}

		$data = UserHelper::signUp($params);
		if ($data) {
			$conditions['mobile']     = $params['mobile'];
			$userInfo                 = UserHelper::selectUserInfo($conditions, ['uid', 'nickname', 'mobile', 'userphoto as avatar', 'money as balance']);
			$userInfo['avatar']       = ImageHelper::getUserPhoto($userInfo['avatar']);     //头像
			$userInfo['access_token'] = WxClientHelper::wxLogin($userInfo['uid'], $params['openid']);
			$this->_data              = $userInfo;

			$this->_message = "注册成功";
		} else {
			$this->_code    = StateCode::COMMON_OPERA_ERROR;
			$this->_message = "注册失败,请重新填写";
		}

		return $this->response();

	}

	/**
	 * 登录
	 * @return array
	 */
	public function actionAjaxLogin()
	{
		$params = [
			'openid'   => $this->_wxOpenId,
			'unionid'  => $this->_wxUnionId,
			'mobile'   => SecurityHelper::getBodyParam('mobile'),
			'password' => SecurityHelper::getBodyParam('password'),
			'code'     => SecurityHelper::getBodyParam('code'),    //password和code分别表示密码和验证码,只需要传其中一个就好
			'type'     => SecurityHelper::getBodyParam('type', 0)  //type=0是密码登录,type=1是验证码登录
		];

		$user = UserHelper::checkMobileExist($params['mobile']); //先检查账号是否存在
		if (!$user) {
			$this->_code    = StateCode::OTHER_MOBILE_NO_EXIST;
			$this->_message = StateCode::get(StateCode::OTHER_MOBILE_NO_EXIST);

			return $this->response();
		}

		//密码登录方式
		if ($params['type'] == 0) {
			if (SecurityHelper::encryptPassword($params['password']) != $user['password']) {
				$this->_code    = StateCode::OTHER_PWD_INCORRECT;
				$this->_message = StateCode::get(StateCode::OTHER_PWD_INCORRECT);

				return $this->response();
			}
		}
		//验证码登录方式
		if ($params['type'] == 1) {
			$res = SecurityHelper::checkCode($params['mobile'], $params['code'], Ref::SMS_CODE_LOGIN_PASSWORD);
			if (!$res) {
				$this->_code    = StateCode::OTHER_SMS_INCORRECT_CODE;
				$this->_message = '验证码错误或失效';

				return $this->response();
			}
		}

		$accessToken              = WxClientHelper::wxLogin($user['uid'], $params['openid'], $params['unionid']);
		$userInfo                 = UserHelper::getUserInfo($user['uid'], ['uid', 'nickname', 'mobile', 'userphoto as avatar', 'money as balance']);
		$userInfo['avatar']       = ImageHelper::getUserPhoto($userInfo['avatar']);     //头像
		$userInfo['access_token'] = $accessToken;

		$this->_data = $userInfo;

		return $this->response();
	}
}