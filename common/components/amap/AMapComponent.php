<?php
/**
 * @link http://www.281.com.cn/
 * @copyright Copyright (c) 2014 中山市中辰信息科技有限公司
 * @license http://www.281.com.cn/license
 * User: Andy Wong(黄燕弟)
 * Date: 2017/6/12 16:01
 */

/**
 * 高德地图
 * 参考：http://lbs.amap.com/api/yuntu/summary
 */

namespace common\components\amap;

use yii\base\Component;
use Yii;

class AMapComponent extends Component
{
	private $api_url = 'https://yuntuapi.amap.com/';

	/**
	 * 云图存储
	 * @var string
	 */
	private $data_manage = 'datamanage/data/';

	/**
	 * 云图检索
	 * 参考 http://lbs.amap.com/api/yuntu/reference/cloudsearch/?_=1504882802984#t5
	 * @var string
	 *
	 */
	private $data_search = 'datasearch/';


	/**
	 * 周边搜索
	 * 参考 http://lbs.amap.com/api/webservice/guide/api/search#around
	 * @var string
	 */
	private $place_around = 'v3/place/around';


	/**
	 * 坐标转换
	 * 参考 http://restapi.amap.com/v3/assistant/coordinate/convert
	 * @var string
	 *
	 */
	private $convert_url = 'http://restapi.amap.com/v3/assistant/coordinate/convert';

	/**
	 * 逆地理编码
	 * 参考 http://restapi.amap.com/v3/assistant/coordinate/convert
	 * @var string
	 *
	 */
	private $regeo_url = 'http://restapi.amap.com/v3/geocode/regeo';

	/**
	 * 关键词搜索
	 * 参考 http://lbs.amap.com/api/webservice/guide/api/search
	 * @var string
	 */
	private $key_search_url = "http://restapi.amap.com/v3/place/text";


	private $rest_api = "http://restapi.amap.com/";


	/**
	 * 对应地图的数据表ID
	 * 配置项
	 * @var string
	 */
	public $tableid;

	/**
	 * 配置项 应用key
	 * @var string
	 */
	public $key;

	public $secret;
	/**
	 * 坐标类型，可选参数，默认为bd09ll。允许的值为：bd09ll（百度经纬度坐标）、bd09mc（百度摩卡托坐标）、gcj02（国测局加密坐标）、wgs84（gps设备获取的坐标）
	 * 配置项
	 * @var
	 */
	public $coord_type;

	/**
	 * 默认距离计算方式
	 * driving驾车,riding骑行,walking步行
	 * @var
	 */
	public $default_way;

	//TODO 添加调试参数
	public $is_debug;

	public function __construct(array $config = [])
	{
		parent::__construct($config);
	}

	public function init()
	{
		parent::init(); // TODO: Change the autogenerated stub
	}

	//骑行距离路线规划

	public function bicycling($origin, $destination)
	{

		$result = false;
		$url    = $this->rest_api . 'v4/direction/bicycling';
		$data   = [
			'key'         => $this->key,
			'origin'      => $origin,            //商家名称,
			'destination' => $destination,
		];

		$saveRes = $this->http($url, $data);
		if (isset($saveRes['errmsg']) && $saveRes['errmsg'] == 'OK') {

			$result = isset($saveRes['data']['paths'][0]) ? $saveRes['data']['paths'][0] : false;
		} else {
			Yii::$app->debug->log_info("bicycling", $saveRes);
		}

		return $result;
	}

	/**
	 * 向云存储创建数据
	 *
	 * @param $params
	 * @param $coordtype  3百度地图  2高德地图*
	 * @return bool
	 */
	public function poiCreate($params, $coordtype = 3)
	{

		$result = false;
		$url    = $this->api_url . $this->data_manage . 'create';
		$data   = [
			'_name'            => $params['shops_name'],            //商家名称,
			'_location'        => $params['location'],
			'coordtype'        => $coordtype,
			'_address'         => "",
			'provider_id'      => $params['provider_id'],            //店铺ID
			'city_id'          => $params['city_id'],                //当前城市
			'cate_id'          => $params['cate_id'],                //分类ID
			'mobile'           => $params['mobile'],                    //手机
			'user_id'          => $params['user_id'],                //用户ID
			'range'            => $params['range'] * 1000,         //商家接单范围（单位：米）
			'vip_status'       => $params['vip_status'],
			'job_time'         => $params['job_time'],
			'original_coord'   => $params['original_coord'],            //原坐标
			"provider_address" => $params['shops_address'],        //地址
		];

		$saveData = [
			'key'     => $this->key,
			'tableid' => $this->tableid,
			'loctype' => 1,
			'data'    => json_encode($data)
		];

		$saveRes = $this->http($url, $saveData, 'POST');

		if ($saveRes['status'] == 1 && isset($saveRes['_id']) && $saveRes['info'] == 'OK') {
			$result = $saveRes['_id'];
		} else {
			Yii::$app->debug->job_info("lbs_create", $saveRes);
			Yii::$app->debug->job_info("lbs_create_data", $saveData);
			Yii::$app->debug->job_info("amap_word", $data['_address']);
		}

		return $result;
	}

	/**
	 * 向云存储更新数据
	 *
	 * @param $data
	 * @param $coordtype  3百度地图  2高德地图
	 * @return mixed [status,message] status 0正常，1服务器内部错误,3003指定POI不存在
	 */
	public function poiUpdate($params = [], $coordtype = 3)
	{
		$url = $this->api_url . $this->data_manage . 'update';

		$data = [
			'_id'              => $params['poi_id'],
			'_name'            => $params['shops_name'],            //商家名称,
			'_location'        => $params['location'],
			'coordtype'        => $coordtype,
			'_address'         => "",
			'provider_id'      => $params['provider_id'],            //店铺ID
			'city_id'          => $params['city_id'],                //当前城市
			'cate_id'          => $params['cate_id'],                //分类ID
			'mobile'           => $params['mobile'],                    //手机
			'user_id'          => $params['user_id'],                //用户ID
			'range'            => $params['range'] * 1000,         //商家接单范围（单位：米）
			'vip_status'       => $params['vip_status'],
			'job_time'         => $params['job_time'],
			'original_coord'   => $params['original_coord'],            //原坐标
			"provider_address" => $params['shops_address'],        //地址
		];

		$saveData = [
			'key'     => $this->key,
			'tableid' => $this->tableid,
			'loctype' => 1,
			'data'    => json_encode($data)
		];

		return $res = $this->http($url, $saveData, 'POST');
	}

	/**
	 * 列出50条附近数据 有参数的生活返回参数数据
	 *
	 * http://lbs.amap.com/api/yuntu/reference/cloudsearch/?_=1508558695159#t5
	 * @param null $params
	 *
	 * @return mixed [status,message] status 0正常 1服务器内部错误
	 */
	public function poiLists($params = null)
	{
		$url      = $this->api_url . $this->data_manage . 'list';
		$listData = [
			'key'     => $this->key,
			'tableid' => $this->tableid,
		];
		if ($params) {
			$listData = array_merge($listData, $params);
		}

		return $this->http($url, $listData);

	}

	/**
	 * 删除数据
	 *
	 * @param $id
	 *
	 * @return mixed  [status,message] status 0正常 1服务器内部错误
	 */

	public function poiDelete($ids)
	{
		$url = $this->api_url . $this->data_manage . 'delete';

		$saveData = [
			'key'     => $this->key,
			'tableid' => $this->tableid,
			'ids'     => $ids,
		];

		return $res = $this->http($url, $saveData, 'POST');
	}

	/**
	 * 附近的数据
	 *
	 * @param        $center_location
	 * @param array  $filter
	 * @param int    $radius
	 * @param string $sort
	 * @param int    $limit
	 * @param int    $page
	 * @return bool
	 */
	public function around($center_location, $filter = [], $radius = 10000, $sort = '_distance:1', $limit = 100, $page = 1)
	{
		$result = false;
		$url    = $this->api_url . $this->data_search . 'around';

		$location_arr = json_decode($center_location, true);    //经纬度小数点后不得超过6位。
		$log          = (string)current($location_arr);
		$lat          = (string)end($location_arr);

		if (!empty($location_arr)) {
			$location = $log . "," . $lat;
			//调用示例
//			$filter =[
//				'cate_id:51',
//				'mobile:15914685847',
//			];

			$data = [
				'key'      => $this->key,
				'tableid'  => $this->tableid,
				'center'   => $location,
				'radius'   => $radius,
				'sortrule' => $sort,
				'limit'    => $limit,
				'page'     => $page,
			];
			if ($filter) {
				$data['filter'] = implode("+", $filter);
			}

			$res = $this->http($url, $data);

			if ($res['status'] == 1 && $res['count'] > 0) {
				$result = $res['datas'];
			} else {
				Yii::$app->debug->job_info('amap_around_cant_find', $res);
			}
		}

		return $result;
	}

	/**
	 * 云存储的详细数据
	 *
	 * @param $id
	 *
	 * @return bool|mixed
	 */
	public function detail($id)
	{
		$result    = false;
		$url       = $this->api_url . $this->geodata_api . 'detail';
		$checkData = [
			'ak'          => $this->ak,
			'geotable_id' => $this->geotable_id,
			'id'          => $id
		];

		$res = $this->http($url, $checkData);
		if ($res['status'] == 0) {
			$result = $res;
		}

		return $result;
	}

	/**
	 * 坐标转换
	 * @param $locations 坐标点 经度和纬度用","分割，经度在前，纬度在后，经纬度小数点后不得超过6位。多个坐标对之间用”|”进行分隔最多支持40对坐标。
	 * @param $coordsys 原坐标系 可选值 gps; mapbar;baidu;autonavi(不进行转换)
	 */
	public function convert($locations, $coordsys = 'baidu')
	{
		$result = false;
		$data   = [
			'key'       => $this->key,
			'locations' => $locations,
			'coordsys'  => $coordsys
		];

		$res = $this->http($this->convert_url, $data);
		if ($res['status'] == 1 && strtolower($res['info']) == 'ok') {
			$result = $res['locations'];
		} else {
			$result = $locations;
			Yii::$app->debug->job_info('amap_convert_fail', $res);
		}

		return $result;
	}

	private function http($url, $data = '', $method = 'GET')
	{
		if ($method == 'GET') {
			$url = $url . '?' . http_build_query($data);
		}
		$curl = curl_init(); // 启动一个CURL会话
		curl_setopt($curl, CURLOPT_URL, $url); // 要访问的地址
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); // 对认证证书来源的检查
		curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false); // 从证书中检查SSL加密算法是否存在
//		curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); // 模拟用户使用的浏览器
		curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); // 使用自动跳转
		curl_setopt($curl, CURLOPT_AUTOREFERER, 1); // 自动设置Referer
		if ($method == 'POST') {
			curl_setopt($curl, CURLOPT_POST, 1); // 发送一个常规的Post请求
			if ($data != '') {
				curl_setopt($curl, CURLOPT_POSTFIELDS, $data); // Post提交的数据包
			}
		}
		curl_setopt($curl, CURLOPT_TIMEOUT, 30); // 设置超时限制防止死循环
		curl_setopt($curl, CURLOPT_HEADER, 0); // 显示返回的Header区域内容
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); // 获取的信息以文件流的形式返回
		$tmpInfo = curl_exec($curl); // 执行操作
		curl_close($curl); // 关闭CURL会话

		return json_decode($tmpInfo, true); // 返回数据
	}

	/**
	 * 高德地图逆地理编码 API
	 *  geocode/regeo API v3.0
	 *
	 * @param string $location 查询坐标        //示例：116.481488,39.990464|116.481488,39.990464
	 * 参考 http://lbs.amap.com/api/webservice/guide/api/georegeo
	 *
	 * @return bool
	 */
	public function getRegeo($params)
	{
		$result = false;
		$data   = [
			'key'    => $this->key,
			'output' => 'json',
			'batch'  => 'true'
		];

		if ($params) {
			$data = array_merge($data, $params);
		}

		$res = $this->http($this->regeo_url, $data);

		if ($res['status'] == 1) {
			$result = $res['regeocodes'];
		} else {
			Yii::$app->debug->log_info("amap_regeo_data", $data);
			Yii::$app->debug->log_info("amap_regeo_result", $res);
		}

		return $result;
	}

	/**
	 * 高德地图搜索地址
	 * @param $params
	 * @return array|bool
	 */
	public function search($params)
	{
		$result = false;
		$data   = [
			'keywords'  => $params['keywords'],
			'key'       => $this->key,
			'city'      => $params['city'],
			'offset'    => $params['limit'],
			'page'      => $params['page'],
			'output'    => 'json',
			'batch'     => 'true',
			'citylimit' => 'true'
		];

		$res = $this->http($this->key_search_url, $data);
		if ($res['status'] == 1) {
			if ($res['pois']) {
				foreach ($res['pois'] as $k => $v) {
					$result['pois'][$k]['name']     = $v['name'];
					$result['pois'][$k]['type']     = $v['type'];
					$result['pois'][$k]['address']  = $v['address'] ? $v['address'] : $v['name'];//TODO 地址为空时,默认使用地址名称
					$result['pois'][$k]['location'] = $v['location'];
					$result['pois'][$k]['pname']    = $v['pname'];
					$result['pois'][$k]['cityname'] = $v['cityname'];
					$result['pois'][$k]['adname']   = $v['adname'];
				}
			}
			$result['num'] = $res['count'];
		} else {
			Yii::error("amap keyword data" . json_encode($data));
			Yii::error("amap keyword result" . json_encode($res));
		}

		return $result;
	}


	/**
	 * 根据中心坐标进行周边搜索
	 * @param $params
	 * @return array|bool
	 */
	public function searchAround($params)
	{
		$result = false;
		$url    = $this->rest_api . $this->place_around;
		$data   = [
			'key'      => $this->key,
			'location' => $params['location'],  //中心点坐标
			'offset'   => $params['pageSize'],     //每页大小
			'page'     => $params['page'],      //当前页
			'radius'   => 1000,                //查询半径
			'output'   => 'json',
		];
		$res    = $this->http($url, $data);
		if ($res['status'] == 1) {
			if (isset($res['pois'][0])) {
				foreach ($res['pois'] as $k => $v) {
					$result['pois'][$k]['name']     = $v['name'];
					$result['pois'][$k]['type']     = $v['type'];
					$result['pois'][$k]['address']  = $v['address'] ? $v['address'] : $v['name'];//TODO 地址为空时,默认使用地址名称
					$result['pois'][$k]['location'] = $v['location'];
					$result['pois'][$k]['distance'] = $v['distance'];
				}
				$result['num'] = $res['count'];
			}
		} else {
			Yii::error("amap search around data" . json_encode($data));
			Yii::error("amap search around result" . json_encode($res));
		}

		return $result;
	}
}