<?php
/**
 * @link http://www.281.com.cn/
 * @copyright Copyright (c) 2014 中山市中辰信息科技有限公司
 * @license http://www.281.com.cn/license
 * User: Andy Wong(黄燕弟)
 * Date: 2017/6/12 16:01
 */

/**
 * 使用百度LBS云来做基于位置的组件
 * 参考：http://lbsyun.baidu.com/index.php?title=lbscloud
 */

namespace common\components\baidu;

use yii\base\Component;
use Yii;

class LBSComponent extends Component
{
	private $api_url = 'http://api.map.baidu.com/';

	/**
	 * LBS 位置数据
	 * @var string
	 */
	private $geodata_api = 'geodata/v3/poi/';

	/**
	 * 云检索
	 * @var string
	 */
	private $geosearch_api = 'geosearch/v3/';

	/**
	 * 路线规划距离和行驶时间 接口
	 * 参考 http://lbsyun.baidu.com/index.php?title=webapi/route-matrix-api-v2
	 * @var string
	 */
	private $route_matrix_api = 'routematrix/v2/';


	/**
	 * 对应虎鲸平台的数据表ID
	 * 配置项
	 * @var int
	 */
	public $geotable_id;

	/**
	 * LBS access key http://lbsyun.baidu.com/apiconsole/key
	 * 配置项
	 * @var
	 */
	public $ak;

	/**
	 * 坐标类型，可选参数，默认为bd09ll。允许的值为：bd09ll（百度经纬度坐标）、bd09mc（百度摩卡托坐标）、gcj02（国测局加密坐标）、wgs84（gps设备获取的坐标）
	 * 配置项
	 * @var
	 */
	public $coord_type;

	/**
	 * 默认距离计算方式
	 * driving驾车,riding骑行,walking步行
	 * @var
	 */
	public $default_way;

	//TODO 添加调试参数
	public $is_debug;

	public function __construct(array $config = [])
	{
		parent::__construct($config);
	}

	public function init()
	{
		parent::init(); // TODO: Change the autogenerated stub
	}

	/**
	 * 向云存储创建数据
	 *
	 * @param $data
	 *
	 * @return bool
	 */
	public function poiCreate($data)
	{

		$result = false;
		$url    = $this->api_url . $this->geodata_api . 'create';
		//TODO 可规范LBS云存储字段
		$saveData = [
			'title'       => $data['shop_id'],                //商家ID
			'shops_name'  => $data['shops_name'],            //商家名称
			'address'     => $data['shops_address'],        //地址
			'tags'        => $data['tags'],                //标签
			'latitude'    => $data['shops_location_lat'],    //纬度
			'longitude'   => $data['shops_location_lng'],    //经度
			'cityid'      => $data['city_id'],                //当前城市
			'is_online'   => $data['shop_login_status'],    //是否在线（1在线，0不在线）
			'cate_id'     => $data['cate_id'],                //分类ID
			'mobile'      => $data['mobile'],                    //手机
			'user_id'     => $data['user_id'],                //用户ID
			'range'       => $data['range'] * 1000,         //商家接单范围（单位：米）
			'create_time' => time(),                        //创建时间
			'working'     => 0,                    //工作（1忙碌 0空闲）
			'vip_status'  => $data['vip_status'],
			'job_time'    => $data['job_time'],
			'coord_type'  => $this->coord_type,
			'geotable_id' => $this->geotable_id,
			'ak'          => $this->ak
		];

		$saveRes = $this->http($url, $saveData, 'POST');
		if ($saveRes['status'] == 0 && isset($saveRes['id'])) {
			$result = $saveRes['id'];
		} else {
			Yii::$app->debug->job_info("baidu_lbs_create", $saveRes);
		}

		return $result;
	}

	/**
	 * 向云存储更新数据
	 *
	 * @param $data
	 *
	 * @return mixed [status,message] status 0正常，1服务器内部错误,3003指定POI不存在
	 */
	public function poiUpdate($data = [])
	{
		$url        = $this->api_url . $this->geodata_api . 'update';
		$updateData = [
			'coord_type'  => $this->coord_type,
			'geotable_id' => $this->geotable_id,
			'ak'          => $this->ak,
			'id'          => $data['poi_id'],        //必填
			'address'     => $data['shops_address'],
			'latitude'    => $data['shops_location_lat'],
			'longitude'   => $data['shops_location_lng'],
			'tags'        => $data['tags'],                    //标签
			'shops_name'  => $data['shops_name'],
			'is_online'   => $data['shop_login_status'],
			'cate_id'     => $data['cate_id'],
			'mobile'      => $data['mobile'],
			'user_id'     => $data['user_id'],
			'range'       => $data['range'] * 1000,            //商家接单范围（单位：米）
			'cityid'      => $data['city_id'],
			'working'     => 0,                    //工作（1忙碌 0空闲）
			'vip_status'  => $data['vip_status'],
			'job_time'    => $data['job_time'],
		];

		return $res = $this->http($url, $updateData, 'POST');
	}

	/**
	 * 列出50条附近数据 有参数的生活返回参数数据
	 *
	 * @param null $params
	 *
	 * @return mixed [status,message] status 0正常 1服务器内部错误
	 */
	public function lists($params = null)
	{
		$url        = $this->api_url . $this->geodata_api . 'list';
		$updateData = [
			'coord_type'  => $this->coord_type,
			'geotable_id' => $this->geotable_id,
			'ak'          => $this->ak
		];

		if ($params) {
			$updateData = array_merge($updateData, $params);
		}

		return $this->http($url, $updateData);
	}

	/**
	 * 删除数据
	 *
	 * @param $id
	 *
	 * @return mixed  [status,message] status 0正常 1服务器内部错误
	 */

	public function poiDelete($id)
	{
		$url        = $this->api_url . $this->geodata_api . 'delete';
		$updateData = [
			'coord_type'  => $this->coord_type,
			'geotable_id' => $this->geotable_id,
			'ak'          => $this->ak,
			'id'          => $id
		];

		return $this->http($url, $updateData, 'POST');
	}

	/**
	 * 附近的数据
	 *
	 * @param        $center_location
	 * @param        $tags
	 * @param int    $radius
	 * @param string $sort
	 *
	 * @return bool
	 */
	public function nearBy($center_location, $tags, $radius = 5000, $sort = 'distance:1')
	{
		$result = false;
		$url    = $this->api_url . $this->geosearch_api . 'nearby';

		$location_arr = json_decode($center_location, true);
		$lng          = (string)current($location_arr);
		$lat          = (string)end($location_arr);

		if (!empty($location_arr)) {
			$location = $lng . ',' . $lat;
			$data     = [
				'ak'          => $this->ak,
				'geotable_id' => $this->geotable_id,
				'coord_type'  => $this->coord_type,
				'location'    => $location,
				'radius'      => $radius,
				'tags'        => $tags,
				'sortby'      => $sort,    //1升序 -1降序
				'filter'      => 'is_online:1',    //在线：1在线 0不在线
				'page_size'   => 50
			];

			$res = $this->http($url, $data);
			if ($res['status'] == 0) {
				$content = $res['contents'];
				if (count($content) > 0)
					$result = $content;
			}
			Yii::$app->debug->job_info('nearby', $res);
		}

		Yii::$app->debug->job_info('location', $center_location);

		return $result;
	}

	/**
	 * 云存储的详细数据
	 *
	 * @param $id
	 *
	 * @return bool|mixed
	 */
	public function detail($id)
	{
		$result    = false;
		$url       = $this->api_url . $this->geodata_api . 'detail';
		$checkData = [
			'ak'          => $this->ak,
			'geotable_id' => $this->geotable_id,
			'id'          => $id
		];

		$res = $this->http($url, $checkData);
		if ($res['status'] == 0) {
			$result = $res;
		}

		return $result;
	}

	/**
	 * 百度地图批量行驶距离计算 API
	 *  Route Matrix API v2.0
	 *
	 * @param string $origins 起始地址        //示例：40.45,116.34|40.54,116.35
	 * @param string $destinations 目的地址    //示例：40.34,116.45|40.35,116.46
	 * 参考 http://lbsyun.baidu.com/index.php?title=webapi/route-matrix-api-v2
	 *
	 * @return bool|mixed
	 */
	public function routeMatrix($origins, $destinations)
	{
		$result = false;
		$url    = $this->api_url . $this->route_matrix_api . $this->default_way;
		$data   = [
			'output'       => 'json',
			'ak'           => $this->ak,
			'origins'      => $origins,
			'destinations' => $destinations
		];

		$res = $this->http($url, $data);
		if ($res['status'] == 0) {
			$result = $res['result'];
		} else {
			Yii::error("baidu lsb data" . json_encode($data));
			Yii::error("baidu lbs result" . json_encode($res));
		}

		return $result;
	}


	public function getLastestPoint($params)
	{

		$url = 'http://yingyan.baidu.com/api/v3/track/getlatestpoint';

		$data = [
			'ak'             => $this->ak,
			'service_id'     => $params['service_id'],
			'entity_name'    => $params['entity_name'],
			'process_option' => $params['process_option'],
		];

		return $this->http($url, $data);
	}


	public function getDistance($params)
	{
		$url  = 'http://yingyan.baidu.com/api/v3/track/getdistance';
		$data = [
			'ak'              => $this->ak,
			'service_id'      => $params['service_id'],
			'entity_name'     => $params['entity_name'],
			'process_option'  => $params['process_option'],
			'start_time'      => $params['start_time'],
			'end_time'        => $params['end_time'],
			'is_processed'    => $params['is_processed'],
			'supplement_mode' => $params['supplement_mode']
		];

		return $this->http($url, $data);

	}

	public function getTrack($params)
	{
		$url  = 'http://yingyan.baidu.com/api/v3/track/gettrack';
		$data = [
			'ak'              => $this->ak,
			'service_id'      => $params['service_id'],
			'entity_name'     => $params['entity_name'],
			'process_option'  => $params['process_option'],
			'start_time'      => $params['start_time'],
			'end_time'        => $params['end_time'],
			'is_processed'    => $params['is_processed'],
			'supplement_mode' => $params['supplement_mode']
		];

		return $this->http($url, $data);
	}

	public function convert($location)
	{
		$result = false;
		$url    = $this->api_url . 'geoconv/v1/';
		$data   = [
			'ak'     => $this->ak,
			'coords' => $location,
			'from'   => 3,
			'to'     => 5,
		];

		$res = $this->http($url, $data);
		if (isset($res['status']) && $res['status'] == 0) {
			$result = "[" . $res['result'][0]['x'] . "," . $res['result'][0]['y'] . "]";
		}

		return $result;
	}


	private function http($url, $data = '', $method = 'GET')
	{
		if ($method == 'GET') {
			$url = $url . '?' . http_build_query($data);
		}

		$curl = curl_init(); // 启动一个CURL会话
		curl_setopt($curl, CURLOPT_URL, $url); // 要访问的地址
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); // 对认证证书来源的检查
		curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false); // 从证书中检查SSL加密算法是否存在
//		curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); // 模拟用户使用的浏览器
		curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); // 使用自动跳转
		curl_setopt($curl, CURLOPT_AUTOREFERER, 1); // 自动设置Referer
		if ($method == 'POST') {
			curl_setopt($curl, CURLOPT_POST, 1); // 发送一个常规的Post请求
			if ($data != '') {
				curl_setopt($curl, CURLOPT_POSTFIELDS, $data); // Post提交的数据包
			}
		}
		curl_setopt($curl, CURLOPT_TIMEOUT, 30); // 设置超时限制防止死循环
		curl_setopt($curl, CURLOPT_HEADER, 0); // 显示返回的Header区域内容
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); // 获取的信息以文件流的形式返回
		$tmpInfo = curl_exec($curl); // 执行操作
		curl_close($curl); // 关闭CURL会话

		return json_decode($tmpInfo, true); // 返回数据
	}
}